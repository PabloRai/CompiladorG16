digraph Automaton {
  0 [label="0\n$accept -> . program $end"]
  0 -> 1 [style=solid label="DEFVAR"]
  0 -> 2 [style=dashed label="program"]
  0 -> 3 [style=dashed label="sentence"]
  0 -> 4 [style=dashed label="variable_declaration_block"]
  1 [label="1\nvariable_declaration_block -> DEFVAR . $@1 variable_declarations ENDDEF"]
  1 -> 5 [style=dashed label="$@1"]
  2 [label="2\n$accept -> program . $end"]
  2 -> 6 [style=solid label="$end"]
  3 [label="3\nprogram -> sentence ."]
  4 [label="4\nsentence -> variable_declaration_block . algorithms\nsentence -> variable_declaration_block ."]
  4 -> 7 [style=solid label="WHILE"]
  4 -> 8 [style=solid label="IF"]
  4 -> 9 [style=solid label="FOR"]
  4 -> 10 [style=solid label="DISPLAY"]
  4 -> 11 [style=solid label="GET"]
  4 -> 12 [style=solid label="ID"]
  4 -> 13 [style=dashed label="algorithms"]
  4 -> 14 [style=dashed label="algorithm"]
  4 -> 15 [style=dashed label="decision"]
  4 -> 16 [style=dashed label="assignment"]
  4 -> 17 [style=dashed label="while_loop"]
  4 -> 18 [style=dashed label="while_special"]
  4 -> 19 [style=dashed label="for_loop"]
  4 -> 20 [style=dashed label="display"]
  4 -> 21 [style=dashed label="get"]
  5 [label="5\nvariable_declaration_block -> DEFVAR $@1 . variable_declarations ENDDEF"]
  5 -> 22 [style=solid label="INT_TYPE"]
  5 -> 23 [style=solid label="FLOAT_TYPE"]
  5 -> 24 [style=solid label="STRING_TYPE"]
  5 -> 25 [style=dashed label="variable_declarations"]
  5 -> 26 [style=dashed label="variable_declaration"]
  5 -> 27 [style=dashed label="variable_type"]
  6 [label="6\n$accept -> program $end ."]
  7 [label="7\nwhile_loop -> WHILE . OPENING_PARENTHESIS condition CLOSING_PARENTHESIS OPENING_KEY algorithms CLOSING_KEY\nwhile_special -> WHILE . ID IN OPENING_SQUARE_BRACKET expression_list CLOSING_SQUARE_BRACKET DO algorithms ENDWHILE"]
  7 -> 28 [style=solid label="ID"]
  7 -> 29 [style=solid label="OPENING_PARENTHESIS"]
  8 [label="8\ndecision -> IF . OPENING_PARENTHESIS condition CLOSING_PARENTHESIS OPENING_KEY algorithms CLOSING_KEY"]
  8 -> 30 [style=solid label="OPENING_PARENTHESIS"]
  9 [label="9\nfor_loop -> FOR . ID ASSIGNMENT_OPERATOR expression TO expression INTEGER_CONSTANT algorithms NEXT ID\nfor_loop -> FOR . ID ASSIGNMENT_OPERATOR expression TO expression algorithms NEXT ID"]
  9 -> 31 [style=solid label="ID"]
  10 [label="10\ndisplay -> DISPLAY . ID\ndisplay -> DISPLAY . INTEGER_CONSTANT\ndisplay -> DISPLAY . FLOAT_CONSTANT\ndisplay -> DISPLAY . STRING_CONSTANT"]
  10 -> 32 [style=solid label="FLOAT_CONSTANT"]
  10 -> 33 [style=solid label="STRING_CONSTANT"]
  10 -> 34 [style=solid label="INTEGER_CONSTANT"]
  10 -> 35 [style=solid label="ID"]
  11 [label="11\nget -> GET . ID"]
  11 -> 36 [style=solid label="ID"]
  12 [label="12\nassignment -> ID . ASSIGNMENT_OPERATOR expression"]
  12 -> 37 [style=solid label="ASSIGNMENT_OPERATOR"]
  13 [label="13\nsentence -> variable_declaration_block algorithms .\nalgorithms -> algorithms . algorithm"]
  13 -> 7 [style=solid label="WHILE"]
  13 -> 8 [style=solid label="IF"]
  13 -> 9 [style=solid label="FOR"]
  13 -> 10 [style=solid label="DISPLAY"]
  13 -> 11 [style=solid label="GET"]
  13 -> 12 [style=solid label="ID"]
  13 -> 38 [style=dashed label="algorithm"]
  13 -> 15 [style=dashed label="decision"]
  13 -> 16 [style=dashed label="assignment"]
  13 -> 17 [style=dashed label="while_loop"]
  13 -> 18 [style=dashed label="while_special"]
  13 -> 19 [style=dashed label="for_loop"]
  13 -> 20 [style=dashed label="display"]
  13 -> 21 [style=dashed label="get"]
  14 [label="14\nalgorithms -> algorithm ."]
  15 [label="15\nalgorithm -> decision ."]
  16 [label="16\nalgorithm -> assignment ."]
  17 [label="17\nalgorithm -> while_loop ."]
  18 [label="18\nalgorithm -> while_special ."]
  19 [label="19\nalgorithm -> for_loop ."]
  20 [label="20\nalgorithm -> display ."]
  21 [label="21\nalgorithm -> get ."]
  22 [label="22\nvariable_type -> INT_TYPE ."]
  23 [label="23\nvariable_type -> FLOAT_TYPE ."]
  24 [label="24\nvariable_type -> STRING_TYPE ."]
  25 [label="25\nvariable_declaration_block -> DEFVAR $@1 variable_declarations . ENDDEF\nvariable_declarations -> variable_declarations . variable_declaration"]
  25 -> 39 [style=solid label="ENDDEF"]
  25 -> 22 [style=solid label="INT_TYPE"]
  25 -> 23 [style=solid label="FLOAT_TYPE"]
  25 -> 24 [style=solid label="STRING_TYPE"]
  25 -> 40 [style=dashed label="variable_declaration"]
  25 -> 27 [style=dashed label="variable_type"]
  26 [label="26\nvariable_declarations -> variable_declaration ."]
  27 [label="27\nvariable_declaration -> variable_type . COLON $@2 variable_list"]
  27 -> 41 [style=solid label="COLON"]
  28 [label="28\nwhile_special -> WHILE ID . IN OPENING_SQUARE_BRACKET expression_list CLOSING_SQUARE_BRACKET DO algorithms ENDWHILE"]
  28 -> 42 [style=solid label="IN"]
  29 [label="29\nwhile_loop -> WHILE OPENING_PARENTHESIS . condition CLOSING_PARENTHESIS OPENING_KEY algorithms CLOSING_KEY"]
  29 -> 43 [style=solid label="FLOAT_CONSTANT"]
  29 -> 44 [style=solid label="STRING_CONSTANT"]
  29 -> 45 [style=solid label="INTEGER_CONSTANT"]
  29 -> 46 [style=solid label="ID"]
  29 -> 47 [style=solid label="OPENING_PARENTHESIS"]
  29 -> 48 [style=solid label="NOT_LOGIC_OPERATOR"]
  29 -> 49 [style=dashed label="condition"]
  29 -> 50 [style=dashed label="comparation"]
  29 -> 51 [style=dashed label="expression"]
  29 -> 52 [style=dashed label="term"]
  29 -> 53 [style=dashed label="factor"]
  30 [label="30\ndecision -> IF OPENING_PARENTHESIS . condition CLOSING_PARENTHESIS OPENING_KEY algorithms CLOSING_KEY"]
  30 -> 43 [style=solid label="FLOAT_CONSTANT"]
  30 -> 44 [style=solid label="STRING_CONSTANT"]
  30 -> 45 [style=solid label="INTEGER_CONSTANT"]
  30 -> 46 [style=solid label="ID"]
  30 -> 47 [style=solid label="OPENING_PARENTHESIS"]
  30 -> 48 [style=solid label="NOT_LOGIC_OPERATOR"]
  30 -> 54 [style=dashed label="condition"]
  30 -> 50 [style=dashed label="comparation"]
  30 -> 51 [style=dashed label="expression"]
  30 -> 52 [style=dashed label="term"]
  30 -> 53 [style=dashed label="factor"]
  31 [label="31\nfor_loop -> FOR ID . ASSIGNMENT_OPERATOR expression TO expression INTEGER_CONSTANT algorithms NEXT ID\nfor_loop -> FOR ID . ASSIGNMENT_OPERATOR expression TO expression algorithms NEXT ID"]
  31 -> 55 [style=solid label="ASSIGNMENT_OPERATOR"]
  32 [label="32\ndisplay -> DISPLAY FLOAT_CONSTANT ."]
  33 [label="33\ndisplay -> DISPLAY STRING_CONSTANT ."]
  34 [label="34\ndisplay -> DISPLAY INTEGER_CONSTANT ."]
  35 [label="35\ndisplay -> DISPLAY ID ."]
  36 [label="36\nget -> GET ID ."]
  37 [label="37\nassignment -> ID ASSIGNMENT_OPERATOR . expression"]
  37 -> 43 [style=solid label="FLOAT_CONSTANT"]
  37 -> 44 [style=solid label="STRING_CONSTANT"]
  37 -> 45 [style=solid label="INTEGER_CONSTANT"]
  37 -> 46 [style=solid label="ID"]
  37 -> 47 [style=solid label="OPENING_PARENTHESIS"]
  37 -> 56 [style=dashed label="expression"]
  37 -> 52 [style=dashed label="term"]
  37 -> 53 [style=dashed label="factor"]
  38 [label="38\nalgorithms -> algorithms algorithm ."]
  39 [label="39\nvariable_declaration_block -> DEFVAR $@1 variable_declarations ENDDEF ."]
  40 [label="40\nvariable_declarations -> variable_declarations variable_declaration ."]
  41 [label="41\nvariable_declaration -> variable_type COLON . $@2 variable_list"]
  41 -> 57 [style=dashed label="$@2"]
  42 [label="42\nwhile_special -> WHILE ID IN . OPENING_SQUARE_BRACKET expression_list CLOSING_SQUARE_BRACKET DO algorithms ENDWHILE"]
  42 -> 58 [style=solid label="OPENING_SQUARE_BRACKET"]
  43 [label="43\nfactor -> FLOAT_CONSTANT ."]
  44 [label="44\nfactor -> STRING_CONSTANT ."]
  45 [label="45\nfactor -> INTEGER_CONSTANT ."]
  46 [label="46\nfactor -> ID ."]
  47 [label="47\nfactor -> OPENING_PARENTHESIS . expression CLOSING_PARENTHESIS"]
  47 -> 43 [style=solid label="FLOAT_CONSTANT"]
  47 -> 44 [style=solid label="STRING_CONSTANT"]
  47 -> 45 [style=solid label="INTEGER_CONSTANT"]
  47 -> 46 [style=solid label="ID"]
  47 -> 47 [style=solid label="OPENING_PARENTHESIS"]
  47 -> 59 [style=dashed label="expression"]
  47 -> 52 [style=dashed label="term"]
  47 -> 53 [style=dashed label="factor"]
  48 [label="48\ncondition -> NOT_LOGIC_OPERATOR . comparation"]
  48 -> 43 [style=solid label="FLOAT_CONSTANT"]
  48 -> 44 [style=solid label="STRING_CONSTANT"]
  48 -> 45 [style=solid label="INTEGER_CONSTANT"]
  48 -> 46 [style=solid label="ID"]
  48 -> 47 [style=solid label="OPENING_PARENTHESIS"]
  48 -> 60 [style=dashed label="comparation"]
  48 -> 51 [style=dashed label="expression"]
  48 -> 52 [style=dashed label="term"]
  48 -> 53 [style=dashed label="factor"]
  49 [label="49\nwhile_loop -> WHILE OPENING_PARENTHESIS condition . CLOSING_PARENTHESIS OPENING_KEY algorithms CLOSING_KEY"]
  49 -> 61 [style=solid label="CLOSING_PARENTHESIS"]
  50 [label="50\ncondition -> comparation .\ncondition -> comparation . logic_concatenator comparation"]
  50 -> 62 [style=solid label="OR"]
  50 -> 63 [style=solid label="AND"]
  50 -> 64 [style=dashed label="logic_concatenator"]
  51 [label="51\ncomparation -> expression . logic_operator expression\nexpression -> expression . SUM_OPERATOR term\nexpression -> expression . MINUS_OPERATOR term"]
  51 -> 65 [style=solid label="SUM_OPERATOR"]
  51 -> 66 [style=solid label="MINUS_OPERATOR"]
  51 -> 67 [style=solid label="EQUALS_LOGIC_OPERATOR"]
  51 -> 68 [style=solid label="NOT_EQUALS_LOGIC_OPERATOR"]
  51 -> 69 [style=solid label="GREATER_LOGIC_OPERATOR"]
  51 -> 70 [style=solid label="GREATER_OR_EQUAL_LOGIC_OPERATOR"]
  51 -> 71 [style=solid label="LOWER_LOGIC_OPERATOR"]
  51 -> 72 [style=solid label="LOWER_OR_EQUAL_LOGIC_OPERATOR"]
  51 -> 73 [style=dashed label="logic_operator"]
  52 [label="52\nexpression -> term .\nterm -> term . MULTIPLIER_OPERATOR factor\nterm -> term . DIVIDE_OPERATOR factor"]
  52 -> 74 [style=solid label="DIVIDE_OPERATOR"]
  52 -> 75 [style=solid label="MULTIPLIER_OPERATOR"]
  53 [label="53\nterm -> factor ."]
  54 [label="54\ndecision -> IF OPENING_PARENTHESIS condition . CLOSING_PARENTHESIS OPENING_KEY algorithms CLOSING_KEY"]
  54 -> 76 [style=solid label="CLOSING_PARENTHESIS"]
  55 [label="55\nfor_loop -> FOR ID ASSIGNMENT_OPERATOR . expression TO expression INTEGER_CONSTANT algorithms NEXT ID\nfor_loop -> FOR ID ASSIGNMENT_OPERATOR . expression TO expression algorithms NEXT ID"]
  55 -> 43 [style=solid label="FLOAT_CONSTANT"]
  55 -> 44 [style=solid label="STRING_CONSTANT"]
  55 -> 45 [style=solid label="INTEGER_CONSTANT"]
  55 -> 46 [style=solid label="ID"]
  55 -> 47 [style=solid label="OPENING_PARENTHESIS"]
  55 -> 77 [style=dashed label="expression"]
  55 -> 52 [style=dashed label="term"]
  55 -> 53 [style=dashed label="factor"]
  56 [label="56\nassignment -> ID ASSIGNMENT_OPERATOR expression .\nexpression -> expression . SUM_OPERATOR term\nexpression -> expression . MINUS_OPERATOR term"]
  56 -> 65 [style=solid label="SUM_OPERATOR"]
  56 -> 66 [style=solid label="MINUS_OPERATOR"]
  57 [label="57\nvariable_declaration -> variable_type COLON $@2 . variable_list"]
  57 -> 78 [style=solid label="ID"]
  57 -> 79 [style=dashed label="variable_list"]
  58 [label="58\nwhile_special -> WHILE ID IN OPENING_SQUARE_BRACKET . expression_list CLOSING_SQUARE_BRACKET DO algorithms ENDWHILE"]
  58 -> 43 [style=solid label="FLOAT_CONSTANT"]
  58 -> 44 [style=solid label="STRING_CONSTANT"]
  58 -> 45 [style=solid label="INTEGER_CONSTANT"]
  58 -> 46 [style=solid label="ID"]
  58 -> 47 [style=solid label="OPENING_PARENTHESIS"]
  58 -> 80 [style=dashed label="expression_list"]
  58 -> 81 [style=dashed label="expression"]
  58 -> 52 [style=dashed label="term"]
  58 -> 53 [style=dashed label="factor"]
  59 [label="59\nexpression -> expression . SUM_OPERATOR term\nexpression -> expression . MINUS_OPERATOR term\nfactor -> OPENING_PARENTHESIS expression . CLOSING_PARENTHESIS"]
  59 -> 82 [style=solid label="CLOSING_PARENTHESIS"]
  59 -> 65 [style=solid label="SUM_OPERATOR"]
  59 -> 66 [style=solid label="MINUS_OPERATOR"]
  60 [label="60\ncondition -> NOT_LOGIC_OPERATOR comparation ."]
  61 [label="61\nwhile_loop -> WHILE OPENING_PARENTHESIS condition CLOSING_PARENTHESIS . OPENING_KEY algorithms CLOSING_KEY"]
  61 -> 83 [style=solid label="OPENING_KEY"]
  62 [label="62\nlogic_concatenator -> OR ."]
  63 [label="63\nlogic_concatenator -> AND ."]
  64 [label="64\ncondition -> comparation logic_concatenator . comparation"]
  64 -> 43 [style=solid label="FLOAT_CONSTANT"]
  64 -> 44 [style=solid label="STRING_CONSTANT"]
  64 -> 45 [style=solid label="INTEGER_CONSTANT"]
  64 -> 46 [style=solid label="ID"]
  64 -> 47 [style=solid label="OPENING_PARENTHESIS"]
  64 -> 84 [style=dashed label="comparation"]
  64 -> 51 [style=dashed label="expression"]
  64 -> 52 [style=dashed label="term"]
  64 -> 53 [style=dashed label="factor"]
  65 [label="65\nexpression -> expression SUM_OPERATOR . term"]
  65 -> 43 [style=solid label="FLOAT_CONSTANT"]
  65 -> 44 [style=solid label="STRING_CONSTANT"]
  65 -> 45 [style=solid label="INTEGER_CONSTANT"]
  65 -> 46 [style=solid label="ID"]
  65 -> 47 [style=solid label="OPENING_PARENTHESIS"]
  65 -> 85 [style=dashed label="term"]
  65 -> 53 [style=dashed label="factor"]
  66 [label="66\nexpression -> expression MINUS_OPERATOR . term"]
  66 -> 43 [style=solid label="FLOAT_CONSTANT"]
  66 -> 44 [style=solid label="STRING_CONSTANT"]
  66 -> 45 [style=solid label="INTEGER_CONSTANT"]
  66 -> 46 [style=solid label="ID"]
  66 -> 47 [style=solid label="OPENING_PARENTHESIS"]
  66 -> 86 [style=dashed label="term"]
  66 -> 53 [style=dashed label="factor"]
  67 [label="67\nlogic_operator -> EQUALS_LOGIC_OPERATOR ."]
  68 [label="68\nlogic_operator -> NOT_EQUALS_LOGIC_OPERATOR ."]
  69 [label="69\nlogic_operator -> GREATER_LOGIC_OPERATOR ."]
  70 [label="70\nlogic_operator -> GREATER_OR_EQUAL_LOGIC_OPERATOR ."]
  71 [label="71\nlogic_operator -> LOWER_LOGIC_OPERATOR ."]
  72 [label="72\nlogic_operator -> LOWER_OR_EQUAL_LOGIC_OPERATOR ."]
  73 [label="73\ncomparation -> expression logic_operator . expression"]
  73 -> 43 [style=solid label="FLOAT_CONSTANT"]
  73 -> 44 [style=solid label="STRING_CONSTANT"]
  73 -> 45 [style=solid label="INTEGER_CONSTANT"]
  73 -> 46 [style=solid label="ID"]
  73 -> 47 [style=solid label="OPENING_PARENTHESIS"]
  73 -> 87 [style=dashed label="expression"]
  73 -> 52 [style=dashed label="term"]
  73 -> 53 [style=dashed label="factor"]
  74 [label="74\nterm -> term DIVIDE_OPERATOR . factor"]
  74 -> 43 [style=solid label="FLOAT_CONSTANT"]
  74 -> 44 [style=solid label="STRING_CONSTANT"]
  74 -> 45 [style=solid label="INTEGER_CONSTANT"]
  74 -> 46 [style=solid label="ID"]
  74 -> 47 [style=solid label="OPENING_PARENTHESIS"]
  74 -> 88 [style=dashed label="factor"]
  75 [label="75\nterm -> term MULTIPLIER_OPERATOR . factor"]
  75 -> 43 [style=solid label="FLOAT_CONSTANT"]
  75 -> 44 [style=solid label="STRING_CONSTANT"]
  75 -> 45 [style=solid label="INTEGER_CONSTANT"]
  75 -> 46 [style=solid label="ID"]
  75 -> 47 [style=solid label="OPENING_PARENTHESIS"]
  75 -> 89 [style=dashed label="factor"]
  76 [label="76\ndecision -> IF OPENING_PARENTHESIS condition CLOSING_PARENTHESIS . OPENING_KEY algorithms CLOSING_KEY"]
  76 -> 90 [style=solid label="OPENING_KEY"]
  77 [label="77\nfor_loop -> FOR ID ASSIGNMENT_OPERATOR expression . TO expression INTEGER_CONSTANT algorithms NEXT ID\nfor_loop -> FOR ID ASSIGNMENT_OPERATOR expression . TO expression algorithms NEXT ID\nexpression -> expression . SUM_OPERATOR term\nexpression -> expression . MINUS_OPERATOR term"]
  77 -> 91 [style=solid label="TO"]
  77 -> 65 [style=solid label="SUM_OPERATOR"]
  77 -> 66 [style=solid label="MINUS_OPERATOR"]
  78 [label="78\nvariable_list -> ID ."]
  79 [label="79\nvariable_declaration -> variable_type COLON $@2 variable_list .\nvariable_list -> variable_list . SEMICOLON ID"]
  79 -> 92 [style=solid label="SEMICOLON"]
  80 [label="80\nwhile_special -> WHILE ID IN OPENING_SQUARE_BRACKET expression_list . CLOSING_SQUARE_BRACKET DO algorithms ENDWHILE\nexpression_list -> expression_list . COMMA expression"]
  80 -> 93 [style=solid label="CLOSING_SQUARE_BRACKET"]
  80 -> 94 [style=solid label="COMMA"]
  81 [label="81\nexpression_list -> expression .\nexpression -> expression . SUM_OPERATOR term\nexpression -> expression . MINUS_OPERATOR term"]
  81 -> 65 [style=solid label="SUM_OPERATOR"]
  81 -> 66 [style=solid label="MINUS_OPERATOR"]
  82 [label="82\nfactor -> OPENING_PARENTHESIS expression CLOSING_PARENTHESIS ."]
  83 [label="83\nwhile_loop -> WHILE OPENING_PARENTHESIS condition CLOSING_PARENTHESIS OPENING_KEY . algorithms CLOSING_KEY"]
  83 -> 7 [style=solid label="WHILE"]
  83 -> 8 [style=solid label="IF"]
  83 -> 9 [style=solid label="FOR"]
  83 -> 10 [style=solid label="DISPLAY"]
  83 -> 11 [style=solid label="GET"]
  83 -> 12 [style=solid label="ID"]
  83 -> 95 [style=dashed label="algorithms"]
  83 -> 14 [style=dashed label="algorithm"]
  83 -> 15 [style=dashed label="decision"]
  83 -> 16 [style=dashed label="assignment"]
  83 -> 17 [style=dashed label="while_loop"]
  83 -> 18 [style=dashed label="while_special"]
  83 -> 19 [style=dashed label="for_loop"]
  83 -> 20 [style=dashed label="display"]
  83 -> 21 [style=dashed label="get"]
  84 [label="84\ncondition -> comparation logic_concatenator comparation ."]
  85 [label="85\nexpression -> expression SUM_OPERATOR term .\nterm -> term . MULTIPLIER_OPERATOR factor\nterm -> term . DIVIDE_OPERATOR factor"]
  85 -> 74 [style=solid label="DIVIDE_OPERATOR"]
  85 -> 75 [style=solid label="MULTIPLIER_OPERATOR"]
  86 [label="86\nexpression -> expression MINUS_OPERATOR term .\nterm -> term . MULTIPLIER_OPERATOR factor\nterm -> term . DIVIDE_OPERATOR factor"]
  86 -> 74 [style=solid label="DIVIDE_OPERATOR"]
  86 -> 75 [style=solid label="MULTIPLIER_OPERATOR"]
  87 [label="87\ncomparation -> expression logic_operator expression .\nexpression -> expression . SUM_OPERATOR term\nexpression -> expression . MINUS_OPERATOR term"]
  87 -> 65 [style=solid label="SUM_OPERATOR"]
  87 -> 66 [style=solid label="MINUS_OPERATOR"]
  88 [label="88\nterm -> term DIVIDE_OPERATOR factor ."]
  89 [label="89\nterm -> term MULTIPLIER_OPERATOR factor ."]
  90 [label="90\ndecision -> IF OPENING_PARENTHESIS condition CLOSING_PARENTHESIS OPENING_KEY . algorithms CLOSING_KEY"]
  90 -> 7 [style=solid label="WHILE"]
  90 -> 8 [style=solid label="IF"]
  90 -> 9 [style=solid label="FOR"]
  90 -> 10 [style=solid label="DISPLAY"]
  90 -> 11 [style=solid label="GET"]
  90 -> 12 [style=solid label="ID"]
  90 -> 96 [style=dashed label="algorithms"]
  90 -> 14 [style=dashed label="algorithm"]
  90 -> 15 [style=dashed label="decision"]
  90 -> 16 [style=dashed label="assignment"]
  90 -> 17 [style=dashed label="while_loop"]
  90 -> 18 [style=dashed label="while_special"]
  90 -> 19 [style=dashed label="for_loop"]
  90 -> 20 [style=dashed label="display"]
  90 -> 21 [style=dashed label="get"]
  91 [label="91\nfor_loop -> FOR ID ASSIGNMENT_OPERATOR expression TO . expression INTEGER_CONSTANT algorithms NEXT ID\nfor_loop -> FOR ID ASSIGNMENT_OPERATOR expression TO . expression algorithms NEXT ID"]
  91 -> 43 [style=solid label="FLOAT_CONSTANT"]
  91 -> 44 [style=solid label="STRING_CONSTANT"]
  91 -> 45 [style=solid label="INTEGER_CONSTANT"]
  91 -> 46 [style=solid label="ID"]
  91 -> 47 [style=solid label="OPENING_PARENTHESIS"]
  91 -> 97 [style=dashed label="expression"]
  91 -> 52 [style=dashed label="term"]
  91 -> 53 [style=dashed label="factor"]
  92 [label="92\nvariable_list -> variable_list SEMICOLON . ID"]
  92 -> 98 [style=solid label="ID"]
  93 [label="93\nwhile_special -> WHILE ID IN OPENING_SQUARE_BRACKET expression_list CLOSING_SQUARE_BRACKET . DO algorithms ENDWHILE"]
  93 -> 99 [style=solid label="DO"]
  94 [label="94\nexpression_list -> expression_list COMMA . expression"]
  94 -> 43 [style=solid label="FLOAT_CONSTANT"]
  94 -> 44 [style=solid label="STRING_CONSTANT"]
  94 -> 45 [style=solid label="INTEGER_CONSTANT"]
  94 -> 46 [style=solid label="ID"]
  94 -> 47 [style=solid label="OPENING_PARENTHESIS"]
  94 -> 100 [style=dashed label="expression"]
  94 -> 52 [style=dashed label="term"]
  94 -> 53 [style=dashed label="factor"]
  95 [label="95\nalgorithms -> algorithms . algorithm\nwhile_loop -> WHILE OPENING_PARENTHESIS condition CLOSING_PARENTHESIS OPENING_KEY algorithms . CLOSING_KEY"]
  95 -> 7 [style=solid label="WHILE"]
  95 -> 8 [style=solid label="IF"]
  95 -> 9 [style=solid label="FOR"]
  95 -> 10 [style=solid label="DISPLAY"]
  95 -> 11 [style=solid label="GET"]
  95 -> 12 [style=solid label="ID"]
  95 -> 101 [style=solid label="CLOSING_KEY"]
  95 -> 38 [style=dashed label="algorithm"]
  95 -> 15 [style=dashed label="decision"]
  95 -> 16 [style=dashed label="assignment"]
  95 -> 17 [style=dashed label="while_loop"]
  95 -> 18 [style=dashed label="while_special"]
  95 -> 19 [style=dashed label="for_loop"]
  95 -> 20 [style=dashed label="display"]
  95 -> 21 [style=dashed label="get"]
  96 [label="96\nalgorithms -> algorithms . algorithm\ndecision -> IF OPENING_PARENTHESIS condition CLOSING_PARENTHESIS OPENING_KEY algorithms . CLOSING_KEY"]
  96 -> 7 [style=solid label="WHILE"]
  96 -> 8 [style=solid label="IF"]
  96 -> 9 [style=solid label="FOR"]
  96 -> 10 [style=solid label="DISPLAY"]
  96 -> 11 [style=solid label="GET"]
  96 -> 12 [style=solid label="ID"]
  96 -> 102 [style=solid label="CLOSING_KEY"]
  96 -> 38 [style=dashed label="algorithm"]
  96 -> 15 [style=dashed label="decision"]
  96 -> 16 [style=dashed label="assignment"]
  96 -> 17 [style=dashed label="while_loop"]
  96 -> 18 [style=dashed label="while_special"]
  96 -> 19 [style=dashed label="for_loop"]
  96 -> 20 [style=dashed label="display"]
  96 -> 21 [style=dashed label="get"]
  97 [label="97\nfor_loop -> FOR ID ASSIGNMENT_OPERATOR expression TO expression . INTEGER_CONSTANT algorithms NEXT ID\nfor_loop -> FOR ID ASSIGNMENT_OPERATOR expression TO expression . algorithms NEXT ID\nexpression -> expression . SUM_OPERATOR term\nexpression -> expression . MINUS_OPERATOR term"]
  97 -> 7 [style=solid label="WHILE"]
  97 -> 8 [style=solid label="IF"]
  97 -> 9 [style=solid label="FOR"]
  97 -> 10 [style=solid label="DISPLAY"]
  97 -> 11 [style=solid label="GET"]
  97 -> 103 [style=solid label="INTEGER_CONSTANT"]
  97 -> 12 [style=solid label="ID"]
  97 -> 65 [style=solid label="SUM_OPERATOR"]
  97 -> 66 [style=solid label="MINUS_OPERATOR"]
  97 -> 104 [style=dashed label="algorithms"]
  97 -> 14 [style=dashed label="algorithm"]
  97 -> 15 [style=dashed label="decision"]
  97 -> 16 [style=dashed label="assignment"]
  97 -> 17 [style=dashed label="while_loop"]
  97 -> 18 [style=dashed label="while_special"]
  97 -> 19 [style=dashed label="for_loop"]
  97 -> 20 [style=dashed label="display"]
  97 -> 21 [style=dashed label="get"]
  98 [label="98\nvariable_list -> variable_list SEMICOLON ID ."]
  99 [label="99\nwhile_special -> WHILE ID IN OPENING_SQUARE_BRACKET expression_list CLOSING_SQUARE_BRACKET DO . algorithms ENDWHILE"]
  99 -> 7 [style=solid label="WHILE"]
  99 -> 8 [style=solid label="IF"]
  99 -> 9 [style=solid label="FOR"]
  99 -> 10 [style=solid label="DISPLAY"]
  99 -> 11 [style=solid label="GET"]
  99 -> 12 [style=solid label="ID"]
  99 -> 105 [style=dashed label="algorithms"]
  99 -> 14 [style=dashed label="algorithm"]
  99 -> 15 [style=dashed label="decision"]
  99 -> 16 [style=dashed label="assignment"]
  99 -> 17 [style=dashed label="while_loop"]
  99 -> 18 [style=dashed label="while_special"]
  99 -> 19 [style=dashed label="for_loop"]
  99 -> 20 [style=dashed label="display"]
  99 -> 21 [style=dashed label="get"]
  100 [label="100\nexpression_list -> expression_list COMMA expression .\nexpression -> expression . SUM_OPERATOR term\nexpression -> expression . MINUS_OPERATOR term"]
  100 -> 65 [style=solid label="SUM_OPERATOR"]
  100 -> 66 [style=solid label="MINUS_OPERATOR"]
  101 [label="101\nwhile_loop -> WHILE OPENING_PARENTHESIS condition CLOSING_PARENTHESIS OPENING_KEY algorithms CLOSING_KEY ."]
  102 [label="102\ndecision -> IF OPENING_PARENTHESIS condition CLOSING_PARENTHESIS OPENING_KEY algorithms CLOSING_KEY ."]
  103 [label="103\nfor_loop -> FOR ID ASSIGNMENT_OPERATOR expression TO expression INTEGER_CONSTANT . algorithms NEXT ID"]
  103 -> 7 [style=solid label="WHILE"]
  103 -> 8 [style=solid label="IF"]
  103 -> 9 [style=solid label="FOR"]
  103 -> 10 [style=solid label="DISPLAY"]
  103 -> 11 [style=solid label="GET"]
  103 -> 12 [style=solid label="ID"]
  103 -> 106 [style=dashed label="algorithms"]
  103 -> 14 [style=dashed label="algorithm"]
  103 -> 15 [style=dashed label="decision"]
  103 -> 16 [style=dashed label="assignment"]
  103 -> 17 [style=dashed label="while_loop"]
  103 -> 18 [style=dashed label="while_special"]
  103 -> 19 [style=dashed label="for_loop"]
  103 -> 20 [style=dashed label="display"]
  103 -> 21 [style=dashed label="get"]
  104 [label="104\nalgorithms -> algorithms . algorithm\nfor_loop -> FOR ID ASSIGNMENT_OPERATOR expression TO expression algorithms . NEXT ID"]
  104 -> 7 [style=solid label="WHILE"]
  104 -> 8 [style=solid label="IF"]
  104 -> 9 [style=solid label="FOR"]
  104 -> 107 [style=solid label="NEXT"]
  104 -> 10 [style=solid label="DISPLAY"]
  104 -> 11 [style=solid label="GET"]
  104 -> 12 [style=solid label="ID"]
  104 -> 38 [style=dashed label="algorithm"]
  104 -> 15 [style=dashed label="decision"]
  104 -> 16 [style=dashed label="assignment"]
  104 -> 17 [style=dashed label="while_loop"]
  104 -> 18 [style=dashed label="while_special"]
  104 -> 19 [style=dashed label="for_loop"]
  104 -> 20 [style=dashed label="display"]
  104 -> 21 [style=dashed label="get"]
  105 [label="105\nalgorithms -> algorithms . algorithm\nwhile_special -> WHILE ID IN OPENING_SQUARE_BRACKET expression_list CLOSING_SQUARE_BRACKET DO algorithms . ENDWHILE"]
  105 -> 7 [style=solid label="WHILE"]
  105 -> 8 [style=solid label="IF"]
  105 -> 9 [style=solid label="FOR"]
  105 -> 10 [style=solid label="DISPLAY"]
  105 -> 11 [style=solid label="GET"]
  105 -> 12 [style=solid label="ID"]
  105 -> 108 [style=solid label="ENDWHILE"]
  105 -> 38 [style=dashed label="algorithm"]
  105 -> 15 [style=dashed label="decision"]
  105 -> 16 [style=dashed label="assignment"]
  105 -> 17 [style=dashed label="while_loop"]
  105 -> 18 [style=dashed label="while_special"]
  105 -> 19 [style=dashed label="for_loop"]
  105 -> 20 [style=dashed label="display"]
  105 -> 21 [style=dashed label="get"]
  106 [label="106\nalgorithms -> algorithms . algorithm\nfor_loop -> FOR ID ASSIGNMENT_OPERATOR expression TO expression INTEGER_CONSTANT algorithms . NEXT ID"]
  106 -> 7 [style=solid label="WHILE"]
  106 -> 8 [style=solid label="IF"]
  106 -> 9 [style=solid label="FOR"]
  106 -> 109 [style=solid label="NEXT"]
  106 -> 10 [style=solid label="DISPLAY"]
  106 -> 11 [style=solid label="GET"]
  106 -> 12 [style=solid label="ID"]
  106 -> 38 [style=dashed label="algorithm"]
  106 -> 15 [style=dashed label="decision"]
  106 -> 16 [style=dashed label="assignment"]
  106 -> 17 [style=dashed label="while_loop"]
  106 -> 18 [style=dashed label="while_special"]
  106 -> 19 [style=dashed label="for_loop"]
  106 -> 20 [style=dashed label="display"]
  106 -> 21 [style=dashed label="get"]
  107 [label="107\nfor_loop -> FOR ID ASSIGNMENT_OPERATOR expression TO expression algorithms NEXT . ID"]
  107 -> 110 [style=solid label="ID"]
  108 [label="108\nwhile_special -> WHILE ID IN OPENING_SQUARE_BRACKET expression_list CLOSING_SQUARE_BRACKET DO algorithms ENDWHILE ."]
  109 [label="109\nfor_loop -> FOR ID ASSIGNMENT_OPERATOR expression TO expression INTEGER_CONSTANT algorithms NEXT . ID"]
  109 -> 111 [style=solid label="ID"]
  110 [label="110\nfor_loop -> FOR ID ASSIGNMENT_OPERATOR expression TO expression algorithms NEXT ID ."]
  111 [label="111\nfor_loop -> FOR ID ASSIGNMENT_OPERATOR expression TO expression INTEGER_CONSTANT algorithms NEXT ID ."]
}
