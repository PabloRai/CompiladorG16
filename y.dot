digraph Automaton {
  0 [label="0\n$accept -> . program $end"]
  0 -> 1 [style=solid label="DEFVAR"]
  0 -> 2 [style=dashed label="program"]
  0 -> 3 [style=dashed label="sentence"]
  0 -> 4 [style=dashed label="variable_declaration_block"]
  1 [label="1\nvariable_declaration_block -> DEFVAR . variable_declarations ENDDEF"]
  1 -> 5 [style=solid label="INT_TYPE"]
  1 -> 6 [style=solid label="FLOAT_TYPE"]
  1 -> 7 [style=solid label="STRING_TYPE"]
  1 -> 8 [style=dashed label="variable_declarations"]
  1 -> 9 [style=dashed label="variable_declaration"]
  1 -> 10 [style=dashed label="variable_type"]
  2 [label="2\n$accept -> program . $end"]
  2 -> 11 [style=solid label="$end"]
  3 [label="3\nprogram -> sentence .\nsentence -> sentence . algorithm"]
  3 -> 12 [style=solid label="WHILE"]
  3 -> 13 [style=solid label="IF"]
  3 -> 14 [style=solid label="FOR"]
  3 -> 15 [style=solid label="DISPLAY"]
  3 -> 16 [style=solid label="GET"]
  3 -> 17 [style=solid label="ID"]
  3 -> 18 [style=dashed label="algorithm"]
  3 -> 19 [style=dashed label="decision"]
  3 -> 20 [style=dashed label="assignment"]
  3 -> 21 [style=dashed label="while_loop"]
  3 -> 22 [style=dashed label="for_loop"]
  3 -> 23 [style=dashed label="display"]
  3 -> 24 [style=dashed label="get"]
  4 [label="4\nsentence -> variable_declaration_block ."]
  5 [label="5\nvariable_type -> INT_TYPE ."]
  6 [label="6\nvariable_type -> FLOAT_TYPE ."]
  7 [label="7\nvariable_type -> STRING_TYPE ."]
  8 [label="8\nvariable_declaration_block -> DEFVAR variable_declarations . ENDDEF\nvariable_declarations -> variable_declarations . variable_declaration"]
  8 -> 25 [style=solid label="ENDDEF"]
  8 -> 5 [style=solid label="INT_TYPE"]
  8 -> 6 [style=solid label="FLOAT_TYPE"]
  8 -> 7 [style=solid label="STRING_TYPE"]
  8 -> 26 [style=dashed label="variable_declaration"]
  8 -> 10 [style=dashed label="variable_type"]
  9 [label="9\nvariable_declarations -> variable_declaration ."]
  10 [label="10\nvariable_declaration -> variable_type . COLON variable_list"]
  10 -> 27 [style=solid label="COLON"]
  11 [label="11\n$accept -> program $end ."]
  12 [label="12\nwhile_loop -> WHILE . OPENING_PARENTHESIS condition CLOSING_PARENTHESIS OPENING_KEY algorithms CLOSING_KEY"]
  12 -> 28 [style=solid label="OPENING_PARENTHESIS"]
  13 [label="13\ndecision -> IF . OPENING_PARENTHESIS condition CLOSING_PARENTHESIS OPENING_KEY algorithms CLOSING_KEY"]
  13 -> 29 [style=solid label="OPENING_PARENTHESIS"]
  14 [label="14\nfor_loop -> FOR . ID ASSIGNMENT_OPERATOR expression TO expression INTEGER_CONSTANT algorithms NEXT ID\nfor_loop -> FOR . ID ASSIGNMENT_OPERATOR expression TO expression algorithms NEXT ID"]
  14 -> 30 [style=solid label="ID"]
  15 [label="15\ndisplay -> DISPLAY . ID\ndisplay -> DISPLAY . INTEGER_CONSTANT\ndisplay -> DISPLAY . FLOAT_CONSTANT\ndisplay -> DISPLAY . STRING_CONSTANT"]
  15 -> 31 [style=solid label="FLOAT_CONSTANT"]
  15 -> 32 [style=solid label="STRING_CONSTANT"]
  15 -> 33 [style=solid label="INTEGER_CONSTANT"]
  15 -> 34 [style=solid label="ID"]
  16 [label="16\nget -> GET . ID"]
  16 -> 35 [style=solid label="ID"]
  17 [label="17\nassignment -> ID . ASSIGNMENT_OPERATOR expression"]
  17 -> 36 [style=solid label="ASSIGNMENT_OPERATOR"]
  18 [label="18\nsentence -> sentence algorithm ."]
  19 [label="19\nalgorithm -> decision ."]
  20 [label="20\nalgorithm -> assignment ."]
  21 [label="21\nalgorithm -> while_loop ."]
  22 [label="22\nalgorithm -> for_loop ."]
  23 [label="23\nalgorithm -> display ."]
  24 [label="24\nalgorithm -> get ."]
  25 [label="25\nvariable_declaration_block -> DEFVAR variable_declarations ENDDEF ."]
  26 [label="26\nvariable_declarations -> variable_declarations variable_declaration ."]
  27 [label="27\nvariable_declaration -> variable_type COLON . variable_list"]
  27 -> 37 [style=solid label="ID"]
  27 -> 38 [style=dashed label="variable_list"]
  28 [label="28\nwhile_loop -> WHILE OPENING_PARENTHESIS . condition CLOSING_PARENTHESIS OPENING_KEY algorithms CLOSING_KEY"]
  28 -> 39 [style=solid label="FLOAT_CONSTANT"]
  28 -> 40 [style=solid label="STRING_CONSTANT"]
  28 -> 41 [style=solid label="INTEGER_CONSTANT"]
  28 -> 42 [style=solid label="ID"]
  28 -> 43 [style=solid label="OPENING_PARENTHESIS"]
  28 -> 44 [style=solid label="NOT_LOGIC_OPERATOR"]
  28 -> 45 [style=dashed label="condition"]
  28 -> 46 [style=dashed label="comparation"]
  28 -> 47 [style=dashed label="expression"]
  28 -> 48 [style=dashed label="term"]
  28 -> 49 [style=dashed label="factor"]
  29 [label="29\ndecision -> IF OPENING_PARENTHESIS . condition CLOSING_PARENTHESIS OPENING_KEY algorithms CLOSING_KEY"]
  29 -> 39 [style=solid label="FLOAT_CONSTANT"]
  29 -> 40 [style=solid label="STRING_CONSTANT"]
  29 -> 41 [style=solid label="INTEGER_CONSTANT"]
  29 -> 42 [style=solid label="ID"]
  29 -> 43 [style=solid label="OPENING_PARENTHESIS"]
  29 -> 44 [style=solid label="NOT_LOGIC_OPERATOR"]
  29 -> 50 [style=dashed label="condition"]
  29 -> 46 [style=dashed label="comparation"]
  29 -> 47 [style=dashed label="expression"]
  29 -> 48 [style=dashed label="term"]
  29 -> 49 [style=dashed label="factor"]
  30 [label="30\nfor_loop -> FOR ID . ASSIGNMENT_OPERATOR expression TO expression INTEGER_CONSTANT algorithms NEXT ID\nfor_loop -> FOR ID . ASSIGNMENT_OPERATOR expression TO expression algorithms NEXT ID"]
  30 -> 51 [style=solid label="ASSIGNMENT_OPERATOR"]
  31 [label="31\ndisplay -> DISPLAY FLOAT_CONSTANT ."]
  32 [label="32\ndisplay -> DISPLAY STRING_CONSTANT ."]
  33 [label="33\ndisplay -> DISPLAY INTEGER_CONSTANT ."]
  34 [label="34\ndisplay -> DISPLAY ID ."]
  35 [label="35\nget -> GET ID ."]
  36 [label="36\nassignment -> ID ASSIGNMENT_OPERATOR . expression"]
  36 -> 39 [style=solid label="FLOAT_CONSTANT"]
  36 -> 40 [style=solid label="STRING_CONSTANT"]
  36 -> 41 [style=solid label="INTEGER_CONSTANT"]
  36 -> 42 [style=solid label="ID"]
  36 -> 43 [style=solid label="OPENING_PARENTHESIS"]
  36 -> 52 [style=dashed label="expression"]
  36 -> 48 [style=dashed label="term"]
  36 -> 49 [style=dashed label="factor"]
  37 [label="37\nvariable_list -> ID ."]
  38 [label="38\nvariable_declaration -> variable_type COLON variable_list .\nvariable_list -> variable_list . SEMICOLON ID"]
  38 -> 53 [style=solid label="SEMICOLON"]
  39 [label="39\nfactor -> FLOAT_CONSTANT ."]
  40 [label="40\nfactor -> STRING_CONSTANT ."]
  41 [label="41\nfactor -> INTEGER_CONSTANT ."]
  42 [label="42\nfactor -> ID ."]
  43 [label="43\nfactor -> OPENING_PARENTHESIS . expression CLOSING_PARENTHESIS"]
  43 -> 39 [style=solid label="FLOAT_CONSTANT"]
  43 -> 40 [style=solid label="STRING_CONSTANT"]
  43 -> 41 [style=solid label="INTEGER_CONSTANT"]
  43 -> 42 [style=solid label="ID"]
  43 -> 43 [style=solid label="OPENING_PARENTHESIS"]
  43 -> 54 [style=dashed label="expression"]
  43 -> 48 [style=dashed label="term"]
  43 -> 49 [style=dashed label="factor"]
  44 [label="44\ncondition -> NOT_LOGIC_OPERATOR . comparation"]
  44 -> 39 [style=solid label="FLOAT_CONSTANT"]
  44 -> 40 [style=solid label="STRING_CONSTANT"]
  44 -> 41 [style=solid label="INTEGER_CONSTANT"]
  44 -> 42 [style=solid label="ID"]
  44 -> 43 [style=solid label="OPENING_PARENTHESIS"]
  44 -> 55 [style=dashed label="comparation"]
  44 -> 47 [style=dashed label="expression"]
  44 -> 48 [style=dashed label="term"]
  44 -> 49 [style=dashed label="factor"]
  45 [label="45\nwhile_loop -> WHILE OPENING_PARENTHESIS condition . CLOSING_PARENTHESIS OPENING_KEY algorithms CLOSING_KEY"]
  45 -> 56 [style=solid label="CLOSING_PARENTHESIS"]
  46 [label="46\ncondition -> comparation .\ncondition -> comparation . logic_operator comparation"]
  46 -> 57 [style=solid label="EQUALS_LOGIC_OPERATOR"]
  46 -> 58 [style=solid label="NOT_EQUALS_LOGIC_OPERATOR"]
  46 -> 59 [style=solid label="GREATER_LOGIC_OPERATOR"]
  46 -> 60 [style=solid label="GREATER_OR_EQUAL_LOGIC_OPERATOR"]
  46 -> 61 [style=solid label="LOWER_LOGIC_OPERATOR"]
  46 -> 62 [style=solid label="LOWER_OR_EQUAL_LOGIC_OPERATOR"]
  46 -> 63 [style=dashed label="logic_operator"]
  47 [label="47\ncomparation -> expression . logic_operator expression\nexpression -> expression . SUM_OPERATOR term\nexpression -> expression . MINUS_OPERATOR term"]
  47 -> 64 [style=solid label="SUM_OPERATOR"]
  47 -> 65 [style=solid label="MINUS_OPERATOR"]
  47 -> 57 [style=solid label="EQUALS_LOGIC_OPERATOR"]
  47 -> 58 [style=solid label="NOT_EQUALS_LOGIC_OPERATOR"]
  47 -> 59 [style=solid label="GREATER_LOGIC_OPERATOR"]
  47 -> 60 [style=solid label="GREATER_OR_EQUAL_LOGIC_OPERATOR"]
  47 -> 61 [style=solid label="LOWER_LOGIC_OPERATOR"]
  47 -> 62 [style=solid label="LOWER_OR_EQUAL_LOGIC_OPERATOR"]
  47 -> 66 [style=dashed label="logic_operator"]
  48 [label="48\nexpression -> term .\nterm -> term . MULTIPLIER_OPERATOR factor\nterm -> term . DIVIDE_OPERATOR factor"]
  48 -> 67 [style=solid label="DIVIDE_OPERATOR"]
  48 -> 68 [style=solid label="MULTIPLIER_OPERATOR"]
  49 [label="49\nterm -> factor ."]
  50 [label="50\ndecision -> IF OPENING_PARENTHESIS condition . CLOSING_PARENTHESIS OPENING_KEY algorithms CLOSING_KEY"]
  50 -> 69 [style=solid label="CLOSING_PARENTHESIS"]
  51 [label="51\nfor_loop -> FOR ID ASSIGNMENT_OPERATOR . expression TO expression INTEGER_CONSTANT algorithms NEXT ID\nfor_loop -> FOR ID ASSIGNMENT_OPERATOR . expression TO expression algorithms NEXT ID"]
  51 -> 39 [style=solid label="FLOAT_CONSTANT"]
  51 -> 40 [style=solid label="STRING_CONSTANT"]
  51 -> 41 [style=solid label="INTEGER_CONSTANT"]
  51 -> 42 [style=solid label="ID"]
  51 -> 43 [style=solid label="OPENING_PARENTHESIS"]
  51 -> 70 [style=dashed label="expression"]
  51 -> 48 [style=dashed label="term"]
  51 -> 49 [style=dashed label="factor"]
  52 [label="52\nassignment -> ID ASSIGNMENT_OPERATOR expression .\nexpression -> expression . SUM_OPERATOR term\nexpression -> expression . MINUS_OPERATOR term"]
  52 -> 64 [style=solid label="SUM_OPERATOR"]
  52 -> 65 [style=solid label="MINUS_OPERATOR"]
  53 [label="53\nvariable_list -> variable_list SEMICOLON . ID"]
  53 -> 71 [style=solid label="ID"]
  54 [label="54\nexpression -> expression . SUM_OPERATOR term\nexpression -> expression . MINUS_OPERATOR term\nfactor -> OPENING_PARENTHESIS expression . CLOSING_PARENTHESIS"]
  54 -> 72 [style=solid label="CLOSING_PARENTHESIS"]
  54 -> 64 [style=solid label="SUM_OPERATOR"]
  54 -> 65 [style=solid label="MINUS_OPERATOR"]
  55 [label="55\ncondition -> NOT_LOGIC_OPERATOR comparation ."]
  56 [label="56\nwhile_loop -> WHILE OPENING_PARENTHESIS condition CLOSING_PARENTHESIS . OPENING_KEY algorithms CLOSING_KEY"]
  56 -> 73 [style=solid label="OPENING_KEY"]
  57 [label="57\nlogic_operator -> EQUALS_LOGIC_OPERATOR ."]
  58 [label="58\nlogic_operator -> NOT_EQUALS_LOGIC_OPERATOR ."]
  59 [label="59\nlogic_operator -> GREATER_LOGIC_OPERATOR ."]
  60 [label="60\nlogic_operator -> GREATER_OR_EQUAL_LOGIC_OPERATOR ."]
  61 [label="61\nlogic_operator -> LOWER_LOGIC_OPERATOR ."]
  62 [label="62\nlogic_operator -> LOWER_OR_EQUAL_LOGIC_OPERATOR ."]
  63 [label="63\ncondition -> comparation logic_operator . comparation"]
  63 -> 39 [style=solid label="FLOAT_CONSTANT"]
  63 -> 40 [style=solid label="STRING_CONSTANT"]
  63 -> 41 [style=solid label="INTEGER_CONSTANT"]
  63 -> 42 [style=solid label="ID"]
  63 -> 43 [style=solid label="OPENING_PARENTHESIS"]
  63 -> 74 [style=dashed label="comparation"]
  63 -> 47 [style=dashed label="expression"]
  63 -> 48 [style=dashed label="term"]
  63 -> 49 [style=dashed label="factor"]
  64 [label="64\nexpression -> expression SUM_OPERATOR . term"]
  64 -> 39 [style=solid label="FLOAT_CONSTANT"]
  64 -> 40 [style=solid label="STRING_CONSTANT"]
  64 -> 41 [style=solid label="INTEGER_CONSTANT"]
  64 -> 42 [style=solid label="ID"]
  64 -> 43 [style=solid label="OPENING_PARENTHESIS"]
  64 -> 75 [style=dashed label="term"]
  64 -> 49 [style=dashed label="factor"]
  65 [label="65\nexpression -> expression MINUS_OPERATOR . term"]
  65 -> 39 [style=solid label="FLOAT_CONSTANT"]
  65 -> 40 [style=solid label="STRING_CONSTANT"]
  65 -> 41 [style=solid label="INTEGER_CONSTANT"]
  65 -> 42 [style=solid label="ID"]
  65 -> 43 [style=solid label="OPENING_PARENTHESIS"]
  65 -> 76 [style=dashed label="term"]
  65 -> 49 [style=dashed label="factor"]
  66 [label="66\ncomparation -> expression logic_operator . expression"]
  66 -> 39 [style=solid label="FLOAT_CONSTANT"]
  66 -> 40 [style=solid label="STRING_CONSTANT"]
  66 -> 41 [style=solid label="INTEGER_CONSTANT"]
  66 -> 42 [style=solid label="ID"]
  66 -> 43 [style=solid label="OPENING_PARENTHESIS"]
  66 -> 77 [style=dashed label="expression"]
  66 -> 48 [style=dashed label="term"]
  66 -> 49 [style=dashed label="factor"]
  67 [label="67\nterm -> term DIVIDE_OPERATOR . factor"]
  67 -> 39 [style=solid label="FLOAT_CONSTANT"]
  67 -> 40 [style=solid label="STRING_CONSTANT"]
  67 -> 41 [style=solid label="INTEGER_CONSTANT"]
  67 -> 42 [style=solid label="ID"]
  67 -> 43 [style=solid label="OPENING_PARENTHESIS"]
  67 -> 78 [style=dashed label="factor"]
  68 [label="68\nterm -> term MULTIPLIER_OPERATOR . factor"]
  68 -> 39 [style=solid label="FLOAT_CONSTANT"]
  68 -> 40 [style=solid label="STRING_CONSTANT"]
  68 -> 41 [style=solid label="INTEGER_CONSTANT"]
  68 -> 42 [style=solid label="ID"]
  68 -> 43 [style=solid label="OPENING_PARENTHESIS"]
  68 -> 79 [style=dashed label="factor"]
  69 [label="69\ndecision -> IF OPENING_PARENTHESIS condition CLOSING_PARENTHESIS . OPENING_KEY algorithms CLOSING_KEY"]
  69 -> 80 [style=solid label="OPENING_KEY"]
  70 [label="70\nfor_loop -> FOR ID ASSIGNMENT_OPERATOR expression . TO expression INTEGER_CONSTANT algorithms NEXT ID\nfor_loop -> FOR ID ASSIGNMENT_OPERATOR expression . TO expression algorithms NEXT ID\nexpression -> expression . SUM_OPERATOR term\nexpression -> expression . MINUS_OPERATOR term"]
  70 -> 81 [style=solid label="TO"]
  70 -> 64 [style=solid label="SUM_OPERATOR"]
  70 -> 65 [style=solid label="MINUS_OPERATOR"]
  71 [label="71\nvariable_list -> variable_list SEMICOLON ID ."]
  72 [label="72\nfactor -> OPENING_PARENTHESIS expression CLOSING_PARENTHESIS ."]
  73 [label="73\nwhile_loop -> WHILE OPENING_PARENTHESIS condition CLOSING_PARENTHESIS OPENING_KEY . algorithms CLOSING_KEY"]
  73 -> 12 [style=solid label="WHILE"]
  73 -> 13 [style=solid label="IF"]
  73 -> 14 [style=solid label="FOR"]
  73 -> 15 [style=solid label="DISPLAY"]
  73 -> 16 [style=solid label="GET"]
  73 -> 17 [style=solid label="ID"]
  73 -> 82 [style=dashed label="algorithms"]
  73 -> 83 [style=dashed label="algorithm"]
  73 -> 19 [style=dashed label="decision"]
  73 -> 20 [style=dashed label="assignment"]
  73 -> 21 [style=dashed label="while_loop"]
  73 -> 22 [style=dashed label="for_loop"]
  73 -> 23 [style=dashed label="display"]
  73 -> 24 [style=dashed label="get"]
  74 [label="74\ncondition -> comparation logic_operator comparation ."]
  75 [label="75\nexpression -> expression SUM_OPERATOR term .\nterm -> term . MULTIPLIER_OPERATOR factor\nterm -> term . DIVIDE_OPERATOR factor"]
  75 -> 67 [style=solid label="DIVIDE_OPERATOR"]
  75 -> 68 [style=solid label="MULTIPLIER_OPERATOR"]
  76 [label="76\nexpression -> expression MINUS_OPERATOR term .\nterm -> term . MULTIPLIER_OPERATOR factor\nterm -> term . DIVIDE_OPERATOR factor"]
  76 -> 67 [style=solid label="DIVIDE_OPERATOR"]
  76 -> 68 [style=solid label="MULTIPLIER_OPERATOR"]
  77 [label="77\ncomparation -> expression logic_operator expression .\nexpression -> expression . SUM_OPERATOR term\nexpression -> expression . MINUS_OPERATOR term"]
  77 -> 64 [style=solid label="SUM_OPERATOR"]
  77 -> 65 [style=solid label="MINUS_OPERATOR"]
  78 [label="78\nterm -> term DIVIDE_OPERATOR factor ."]
  79 [label="79\nterm -> term MULTIPLIER_OPERATOR factor ."]
  80 [label="80\ndecision -> IF OPENING_PARENTHESIS condition CLOSING_PARENTHESIS OPENING_KEY . algorithms CLOSING_KEY"]
  80 -> 12 [style=solid label="WHILE"]
  80 -> 13 [style=solid label="IF"]
  80 -> 14 [style=solid label="FOR"]
  80 -> 15 [style=solid label="DISPLAY"]
  80 -> 16 [style=solid label="GET"]
  80 -> 17 [style=solid label="ID"]
  80 -> 84 [style=dashed label="algorithms"]
  80 -> 83 [style=dashed label="algorithm"]
  80 -> 19 [style=dashed label="decision"]
  80 -> 20 [style=dashed label="assignment"]
  80 -> 21 [style=dashed label="while_loop"]
  80 -> 22 [style=dashed label="for_loop"]
  80 -> 23 [style=dashed label="display"]
  80 -> 24 [style=dashed label="get"]
  81 [label="81\nfor_loop -> FOR ID ASSIGNMENT_OPERATOR expression TO . expression INTEGER_CONSTANT algorithms NEXT ID\nfor_loop -> FOR ID ASSIGNMENT_OPERATOR expression TO . expression algorithms NEXT ID"]
  81 -> 39 [style=solid label="FLOAT_CONSTANT"]
  81 -> 40 [style=solid label="STRING_CONSTANT"]
  81 -> 41 [style=solid label="INTEGER_CONSTANT"]
  81 -> 42 [style=solid label="ID"]
  81 -> 43 [style=solid label="OPENING_PARENTHESIS"]
  81 -> 85 [style=dashed label="expression"]
  81 -> 48 [style=dashed label="term"]
  81 -> 49 [style=dashed label="factor"]
  82 [label="82\nalgorithms -> algorithms . algorithm\nwhile_loop -> WHILE OPENING_PARENTHESIS condition CLOSING_PARENTHESIS OPENING_KEY algorithms . CLOSING_KEY"]
  82 -> 12 [style=solid label="WHILE"]
  82 -> 13 [style=solid label="IF"]
  82 -> 14 [style=solid label="FOR"]
  82 -> 15 [style=solid label="DISPLAY"]
  82 -> 16 [style=solid label="GET"]
  82 -> 17 [style=solid label="ID"]
  82 -> 86 [style=solid label="CLOSING_KEY"]
  82 -> 87 [style=dashed label="algorithm"]
  82 -> 19 [style=dashed label="decision"]
  82 -> 20 [style=dashed label="assignment"]
  82 -> 21 [style=dashed label="while_loop"]
  82 -> 22 [style=dashed label="for_loop"]
  82 -> 23 [style=dashed label="display"]
  82 -> 24 [style=dashed label="get"]
  83 [label="83\nalgorithms -> algorithm ."]
  84 [label="84\nalgorithms -> algorithms . algorithm\ndecision -> IF OPENING_PARENTHESIS condition CLOSING_PARENTHESIS OPENING_KEY algorithms . CLOSING_KEY"]
  84 -> 12 [style=solid label="WHILE"]
  84 -> 13 [style=solid label="IF"]
  84 -> 14 [style=solid label="FOR"]
  84 -> 15 [style=solid label="DISPLAY"]
  84 -> 16 [style=solid label="GET"]
  84 -> 17 [style=solid label="ID"]
  84 -> 88 [style=solid label="CLOSING_KEY"]
  84 -> 87 [style=dashed label="algorithm"]
  84 -> 19 [style=dashed label="decision"]
  84 -> 20 [style=dashed label="assignment"]
  84 -> 21 [style=dashed label="while_loop"]
  84 -> 22 [style=dashed label="for_loop"]
  84 -> 23 [style=dashed label="display"]
  84 -> 24 [style=dashed label="get"]
  85 [label="85\nfor_loop -> FOR ID ASSIGNMENT_OPERATOR expression TO expression . INTEGER_CONSTANT algorithms NEXT ID\nfor_loop -> FOR ID ASSIGNMENT_OPERATOR expression TO expression . algorithms NEXT ID\nexpression -> expression . SUM_OPERATOR term\nexpression -> expression . MINUS_OPERATOR term"]
  85 -> 12 [style=solid label="WHILE"]
  85 -> 13 [style=solid label="IF"]
  85 -> 14 [style=solid label="FOR"]
  85 -> 15 [style=solid label="DISPLAY"]
  85 -> 16 [style=solid label="GET"]
  85 -> 89 [style=solid label="INTEGER_CONSTANT"]
  85 -> 17 [style=solid label="ID"]
  85 -> 64 [style=solid label="SUM_OPERATOR"]
  85 -> 65 [style=solid label="MINUS_OPERATOR"]
  85 -> 90 [style=dashed label="algorithms"]
  85 -> 83 [style=dashed label="algorithm"]
  85 -> 19 [style=dashed label="decision"]
  85 -> 20 [style=dashed label="assignment"]
  85 -> 21 [style=dashed label="while_loop"]
  85 -> 22 [style=dashed label="for_loop"]
  85 -> 23 [style=dashed label="display"]
  85 -> 24 [style=dashed label="get"]
  86 [label="86\nwhile_loop -> WHILE OPENING_PARENTHESIS condition CLOSING_PARENTHESIS OPENING_KEY algorithms CLOSING_KEY ."]
  87 [label="87\nalgorithms -> algorithms algorithm ."]
  88 [label="88\ndecision -> IF OPENING_PARENTHESIS condition CLOSING_PARENTHESIS OPENING_KEY algorithms CLOSING_KEY ."]
  89 [label="89\nfor_loop -> FOR ID ASSIGNMENT_OPERATOR expression TO expression INTEGER_CONSTANT . algorithms NEXT ID"]
  89 -> 12 [style=solid label="WHILE"]
  89 -> 13 [style=solid label="IF"]
  89 -> 14 [style=solid label="FOR"]
  89 -> 15 [style=solid label="DISPLAY"]
  89 -> 16 [style=solid label="GET"]
  89 -> 17 [style=solid label="ID"]
  89 -> 91 [style=dashed label="algorithms"]
  89 -> 83 [style=dashed label="algorithm"]
  89 -> 19 [style=dashed label="decision"]
  89 -> 20 [style=dashed label="assignment"]
  89 -> 21 [style=dashed label="while_loop"]
  89 -> 22 [style=dashed label="for_loop"]
  89 -> 23 [style=dashed label="display"]
  89 -> 24 [style=dashed label="get"]
  90 [label="90\nalgorithms -> algorithms . algorithm\nfor_loop -> FOR ID ASSIGNMENT_OPERATOR expression TO expression algorithms . NEXT ID"]
  90 -> 12 [style=solid label="WHILE"]
  90 -> 13 [style=solid label="IF"]
  90 -> 14 [style=solid label="FOR"]
  90 -> 92 [style=solid label="NEXT"]
  90 -> 15 [style=solid label="DISPLAY"]
  90 -> 16 [style=solid label="GET"]
  90 -> 17 [style=solid label="ID"]
  90 -> 87 [style=dashed label="algorithm"]
  90 -> 19 [style=dashed label="decision"]
  90 -> 20 [style=dashed label="assignment"]
  90 -> 21 [style=dashed label="while_loop"]
  90 -> 22 [style=dashed label="for_loop"]
  90 -> 23 [style=dashed label="display"]
  90 -> 24 [style=dashed label="get"]
  91 [label="91\nalgorithms -> algorithms . algorithm\nfor_loop -> FOR ID ASSIGNMENT_OPERATOR expression TO expression INTEGER_CONSTANT algorithms . NEXT ID"]
  91 -> 12 [style=solid label="WHILE"]
  91 -> 13 [style=solid label="IF"]
  91 -> 14 [style=solid label="FOR"]
  91 -> 93 [style=solid label="NEXT"]
  91 -> 15 [style=solid label="DISPLAY"]
  91 -> 16 [style=solid label="GET"]
  91 -> 17 [style=solid label="ID"]
  91 -> 87 [style=dashed label="algorithm"]
  91 -> 19 [style=dashed label="decision"]
  91 -> 20 [style=dashed label="assignment"]
  91 -> 21 [style=dashed label="while_loop"]
  91 -> 22 [style=dashed label="for_loop"]
  91 -> 23 [style=dashed label="display"]
  91 -> 24 [style=dashed label="get"]
  92 [label="92\nfor_loop -> FOR ID ASSIGNMENT_OPERATOR expression TO expression algorithms NEXT . ID"]
  92 -> 94 [style=solid label="ID"]
  93 [label="93\nfor_loop -> FOR ID ASSIGNMENT_OPERATOR expression TO expression INTEGER_CONSTANT algorithms NEXT . ID"]
  93 -> 95 [style=solid label="ID"]
  94 [label="94\nfor_loop -> FOR ID ASSIGNMENT_OPERATOR expression TO expression algorithms NEXT ID ."]
  95 [label="95\nfor_loop -> FOR ID ASSIGNMENT_OPERATOR expression TO expression INTEGER_CONSTANT algorithms NEXT ID ."]
}
